/* tslint:disable */
/* eslint-disable */
/**
 * 訂餐系統
 * 系統API規格說明
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ResponseModel,
} from '../models/index';
import {
    ResponseModelFromJSON,
    ResponseModelToJSON,
} from '../models/index';

export interface ApiOfficeDeleteOfficeMemberDeleteRequest {
    officeMemberIDs?: Array<string>;
}

export interface ApiOfficeGetOfficeListGetRequest {
    requestData?: object;
}

export interface ApiOfficeGetOfficeMemberListOfficeIDGetRequest {
    officeID: string;
}

export interface ApiOfficePostOfficeMemberOfficeIDPostRequest {
    officeID: string;
    accountIDs?: Array<string>;
}

/**
 * 
 */
export class OfficeApi extends runtime.BaseAPI {

    /**
     */
    async apiOfficeDeleteOfficeMemberDeleteRaw(requestParameters: ApiOfficeDeleteOfficeMemberDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.officeMemberIDs) {
            requestParameters.officeMemberIDs.forEach((element) => {
                formParams.append('OfficeMemberIDs', element as any);
            })
        }

        const response = await this.request({
            path: `/api/Office/DeleteOfficeMember`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiOfficeDeleteOfficeMemberDelete(requestParameters: ApiOfficeDeleteOfficeMemberDeleteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseModel> {
        const response = await this.apiOfficeDeleteOfficeMemberDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOfficeGetOfficeListGetRaw(requestParameters: ApiOfficeGetOfficeListGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters.requestData !== undefined) {
            queryParameters['RequestData'] = requestParameters.requestData;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Office/GetOfficeList`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiOfficeGetOfficeListGet(requestParameters: ApiOfficeGetOfficeListGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseModel> {
        const response = await this.apiOfficeGetOfficeListGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOfficeGetOfficeMemberListOfficeIDGetRaw(requestParameters: ApiOfficeGetOfficeMemberListOfficeIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseModel>> {
        if (requestParameters.officeID === null || requestParameters.officeID === undefined) {
            throw new runtime.RequiredError('officeID','Required parameter requestParameters.officeID was null or undefined when calling apiOfficeGetOfficeMemberListOfficeIDGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Office/GetOfficeMemberList/{OfficeID}`.replace(`{${"OfficeID"}}`, encodeURIComponent(String(requestParameters.officeID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiOfficeGetOfficeMemberListOfficeIDGet(requestParameters: ApiOfficeGetOfficeMemberListOfficeIDGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseModel> {
        const response = await this.apiOfficeGetOfficeMemberListOfficeIDGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOfficePostOfficeMemberOfficeIDPostRaw(requestParameters: ApiOfficePostOfficeMemberOfficeIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseModel>> {
        if (requestParameters.officeID === null || requestParameters.officeID === undefined) {
            throw new runtime.RequiredError('officeID','Required parameter requestParameters.officeID was null or undefined when calling apiOfficePostOfficeMemberOfficeIDPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.accountIDs) {
            requestParameters.accountIDs.forEach((element) => {
                formParams.append('AccountIDs', element as any);
            })
        }

        const response = await this.request({
            path: `/api/Office/PostOfficeMember/{OfficeID}`.replace(`{${"OfficeID"}}`, encodeURIComponent(String(requestParameters.officeID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiOfficePostOfficeMemberOfficeIDPost(requestParameters: ApiOfficePostOfficeMemberOfficeIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseModel> {
        const response = await this.apiOfficePostOfficeMemberOfficeIDPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
