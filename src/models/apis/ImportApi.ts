/* tslint:disable */
/* eslint-disable */
/**
 * 訂餐系統
 * 系統API規格說明
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ResponseModel,
} from '../models/index';
import {
    ResponseModelFromJSON,
    ResponseModelToJSON,
} from '../models/index';

export interface ApiImportReadBrandStoreExcelPostRequest {
    file?: Blob;
}

export interface ApiImportReadDrinkFoodExcelMenuIDPostRequest {
    menuID: string;
    file?: Blob;
}

export interface ApiImportReadOrderDetailExcelOrderIDPostRequest {
    orderID: string;
    file?: Blob;
}

/**
 * 
 */
export class ImportApi extends runtime.BaseAPI {

    /**
     */
    async apiImportReadBrandStoreExcelPostRaw(requestParameters: ApiImportReadBrandStoreExcelPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('File', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/api/Import/ReadBrandStoreExcel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiImportReadBrandStoreExcelPost(requestParameters: ApiImportReadBrandStoreExcelPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseModel> {
        const response = await this.apiImportReadBrandStoreExcelPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImportReadDrinkFoodExcelMenuIDPostRaw(requestParameters: ApiImportReadDrinkFoodExcelMenuIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseModel>> {
        if (requestParameters.menuID === null || requestParameters.menuID === undefined) {
            throw new runtime.RequiredError('menuID','Required parameter requestParameters.menuID was null or undefined when calling apiImportReadDrinkFoodExcelMenuIDPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('File', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/api/Import/ReadDrinkFoodExcel/{MenuID}`.replace(`{${"MenuID"}}`, encodeURIComponent(String(requestParameters.menuID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiImportReadDrinkFoodExcelMenuIDPost(requestParameters: ApiImportReadDrinkFoodExcelMenuIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseModel> {
        const response = await this.apiImportReadDrinkFoodExcelMenuIDPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiImportReadOrderDetailExcelOrderIDPostRaw(requestParameters: ApiImportReadOrderDetailExcelOrderIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseModel>> {
        if (requestParameters.orderID === null || requestParameters.orderID === undefined) {
            throw new runtime.RequiredError('orderID','Required parameter requestParameters.orderID was null or undefined when calling apiImportReadOrderDetailExcelOrderIDPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('File', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/api/Import/ReadOrderDetailExcel/{OrderID}`.replace(`{${"OrderID"}}`, encodeURIComponent(String(requestParameters.orderID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseModelFromJSON(jsonValue));
    }

    /**
     */
    async apiImportReadOrderDetailExcelOrderIDPost(requestParameters: ApiImportReadOrderDetailExcelOrderIDPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseModel> {
        const response = await this.apiImportReadOrderDetailExcelOrderIDPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
